<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: view | cloudmusic android team dev_blog]]></title>
  <link href="http://cloudmusic.github.io/blog/categories/view/atom.xml" rel="self"/>
  <link href="http://cloudmusic.github.io/"/>
  <updated>2014-10-24T13:19:33+08:00</updated>
  <id>http://cloudmusic.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    <email><![CDATA[androidfb@163.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[android子view的pressed状态受父view的clickable影响分析]]></title>
    <link href="http://cloudmusic.github.io/blog/2014/10/10/android-view-pressed/"/>
    <updated>2014-10-10T14:36:17+08:00</updated>
    <id>http://cloudmusic.github.io/blog/2014/10/10/android-view-pressed</id>
    <content type="html"><![CDATA[<p>android从sdk16开始，修改了onTouchEvent的ACTION_DOWN代码(<a href="http://stackoverflow.com/questions/14179431/android-child-view-sharing-pressed-state-from-its-parent-view-in-jelly-bean">Android: Child elements sharing pressed state with their parent even when duplicateParentState specified</a>)，如下：</p>

<p>sdk16以前：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>            <span class="n">mHasPerformedLongPress</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>            <span class="nf">if</span> <span class="o">(</span><span class="n">performButtonActionOnTouchDown</span><span class="o">(</span><span class="n">event</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Walk up the hierarchy to determine if we&#39;re inside a scrolling container.</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">isInScrollingContainer</span> <span class="o">=</span> <span class="n">isInScrollingContainer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// For views inside a scrolling container, delay the pressed feedback for</span>
</span><span class='line'>        <span class="c1">// a short period in case this is a scroll.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">isInScrollingContainer</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PREPRESSED</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">mPendingCheckForTap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPendingCheckForTap</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CheckForTap</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">postDelayed</span><span class="o">(</span><span class="n">mPendingCheckForTap</span><span class="o">,</span> <span class="n">ViewConfiguration</span><span class="o">.</span><span class="na">getTapTimeout</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Not inside a scrolling container, so show the feedback right away</span>
</span><span class='line'>            <span class="n">mPrivateFlags</span> <span class="o">|=</span> <span class="n">PRESSED</span><span class="o">;</span> <span class="c1">//comment by bran</span>
</span><span class='line'>            <span class="n">refreshDrawableState</span><span class="o">();</span>
</span><span class='line'>            <span class="n">checkForLongClick</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sdk16及以后</span><span class="err">：</span>
</span></code></pre></td></tr></table></div></figure>java
    case MotionEvent.ACTION_DOWN:
                mHasPerformedLongPress = false;</p>

<pre><code>            if (performButtonActionOnTouchDown(event)) {
                break;
            }

            // Walk up the hierarchy to determine if we're inside a scrolling container.
            boolean isInScrollingContainer = isInScrollingContainer();

            // For views inside a scrolling container, delay the pressed feedback for
            // a short period in case this is a scroll.
            if (isInScrollingContainer) {
                mPrivateFlags |= PFLAG_PREPRESSED;
                if (mPendingCheckForTap == null) {
                    mPendingCheckForTap = new CheckForTap();
                }
                postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());
            } else {
                // Not inside a scrolling container, so show the feedback right away
                setPressed(true);
                checkForLongClick(0);
            }
            break;
</code></pre>

<pre><code>
后者会调用setPressed方法，代码如下：
</code></pre>

<pre><code>public void setPressed(boolean pressed) {
    final boolean needsRefresh = pressed != ((mPrivateFlags &amp; PFLAG_PRESSED) == PFLAG_PRESSED);

    if (pressed) {
        mPrivateFlags |= PFLAG_PRESSED;
    } else {
        mPrivateFlags &amp;= ~PFLAG_PRESSED;
    }

    if (needsRefresh) {
        refreshDrawableState();
    }
    dispatchSetPressed(pressed);
}

//viewgroup的实现
protected void dispatchSetPressed(boolean pressed) {
    final View[] children = mChildren;
    final int count = mChildrenCount;
    for (int i = 0; i &lt; count; i++) {
        final View child = children[i];
        // Children that are clickable on their own should not
        // show a pressed state when their parent view does.
        // Clearing a pressed state always propagates.
        if (!pressed || (!child.isClickable() &amp;&amp; !child.isLongClickable())) {
            child.setPressed(pressed);
        }
    }
}
</code></pre>

<p>&#8220;`</p>

<p>可以看出sdk16以后如果子view是!isClickable，父view是isClickable（父view如果是!isClickable都不会处理ACTION_DOWN事件），则即使在子view区域外的点击也会触发子view的pressed行为。这样改的原因不得而知，但个人觉得这不是正常期望的，UI表现上来看，父view点击任何区域子view都会触发pressed。</p>

<p>这种情景是存在的，比如子view是不可点，但又要设置父view可点以防点击父view会触发父父view事件。如果要处理这种情况，父view可以覆盖dispatchSetPressed方法进行重写，或者直接父view设置setEnable(false)。</p>
]]></content>
  </entry>
  
</feed>
